function [data, theta] = TrackPointsMultiFile(fileroot, filenames)
%CinePlex Data Analysis Function
%Parses text files from Cineplex to determine time and angle
%Plots each tracked point connected to the others with lines
%Tracked points should be in columns in the order that you would like
%those points connected in the figures

%Inputs: fileroot (string) excluding file name
%        filenames (cell array of strings) file names separated by commas

%Meghan Jimenez
%SINAPSE
%19 December 2014

disp('This function is meant to help you navigate through CinePlex data')
disp('for easier data analysis. The following commands can be used:')
disp('n: next frame')
disp('b: previous frame')
disp('t: enter a time to navigate to')
disp('f: enter a frame to navigate to')
disp('c: click a point on the average graph to navigate to')
disp('Move the slider below the plot. Click on the figure to navigate there')

%Clear anything in the figure
clf

%Global variable to track frame number through slider callback
global f

%Generate a set of names for each file's data and theta values
fSetup(1:length(filenames)) = {'file'};
fNames = genvarname(fSetup);

tSetup(1:length(filenames)) = {'theta'};
tNames = genvarname(tSetup);

%Set the axis maximums and minimums
xmax = -inf;
xmin = inf;
ymax = -inf;
ymin = inf;

for c = 1:length(filenames)
    
%Construct file name
filepath = cell2mat(strcat(fileroot,'/',filenames(c),'.txt'));

%Load the data from the file into a variable
dataMat = load(filepath);

%Fill a data structure with the data from the file
data.(fNames{c}) = dataMat;

%Calculates the number of variables (columns) and data points (rows)
[Length, numVars] = size(dataMat);

%Initialize data structure for holding theta values
theta.(tNames{c})(1:Length, 1:(numVars - 2)/2 - 2) = 0;

%Loop over all of the variables in each frame of the video
%Skips time and frame columns, looks at variables in x,y pairs
%Tracks the previous (ppx & ppy, px & py) and current (x, y) point to
%find the angle between them and create a theta matrix
lineLen = 0;
px = 0;
py = 0;
for i = 1:Length
    for j = 3:numVars - 2
        if mod(j,2) ~= 0
            ppx = px; %2-back x,y
            ppy = py;

            px = data.(fNames{c})(i,j); %Previous x, y
            py = data.(fNames{c})(i,j + 1);

            x = data.(fNames{c})(i,j + 2); %Current x, y
            y = data.(fNames{c})(i,j + 3);

            %Store the previous line length
            pLineLen = lineLen;

            %Calculate the distance between points
            dx = x - px;
            dy = y - py;
            lineLen = sqrt(dx^2 + dy^2);

            %Calculate the angle with law of cosines
            if j > 3
                hypDx = ppx - x;
                hypDy = ppy - y;
                hyp = sqrt(hypDx^2 + hypDy^2);
                angle = acosd((pLineLen^2 + lineLen^2 - hyp^2)...
                   /(2*pLineLen*lineLen));
                theta.(tNames{c})(i,(j-1)/2 - 1) = angle;
            end            
        end
    end
end
end

%Make a copy for adjusted data for plotting
aData = data;
xdiff = 0;
ydiff = 0;
%Adjust data so that all runs start at the same point
%Center point is (500, 500)
for c = 1:length(filenames)
    for f = 1:Length
        for j = 3:numVars
            if j == 3 || j == 4
                if mod(j,2) ~= 0 
                    xdiff = 500 - aData.(fNames{c})(f,j);
                    aData.(fNames{c})(f,j) = aData.(fNames{c})(f,j) + xdiff;
                else
                    ydiff = 500 - aData.(fNames{c})(f,j);
                    aData.(fNames{c})(f,j) = aData.(fNames{c})(f,j) + ydiff;
                end
            else
                if mod(j,2) ~= 0 
                    aData.(fNames{c})(f,j) = aData.(fNames{c})(f,j) + xdiff;
                else
                    aData.(fNames{c})(f,j) = aData.(fNames{c})(f,j) + ydiff;
                end
            end
        end    
    end
end

%Find max and min for x and y by checking through each tracked point's 
%x and y values and comparing
for c = 1:length(filenames)
    for j = 3:numVars
        cmax = max(aData.(fNames{c})(:,j));
        cmin = min(aData.(fNames{c})(:,j));

        if mod(j,2) == 0
            if cmax > ymax
                ymax = cmax;
            end
            if cmin < ymin
                ymin = cmin;
            end

        else
            if cmax > ymax
                xmax = cmax;
            end
            if cmin < ymin
                xmin = cmin;
            end
        end      

    end
end

%Find the file with the maximum length
mLength = 0;
mFile = 1;
for c = 1:length(filenames)
    [currLength, ~] = size(aData.(fNames{c}));
    if mLength < currLength
        mLength = currLength;
        mFile = c;
    end
end

%Copy data structures to make averaged versions
avgData = aData.(fNames{mFile});
avgTheta = theta.(tNames{mFile});
sdTheta = theta.(tNames{mFile});

%Find the width of theta
[~,wTheta] = size(avgTheta);

%Take averages over all files of the data and theta values
for i = 1:Length
    for j = 1:numVars
        dCount = 1; %Counters to determine how much to divide by
        tCount = 1; %in case one file is longer and there are 0's
        for c = 1:length(filenames)
            if j > 2 %Ignore the frame and time columns of the data
                if c == mFile %Skip the copied data
                    continue
                end
                %Average the data
                if aData.(fNames{c})(i,j) ~= 0
                    avgData(i,j) = avgData(i,j) + aData.(fNames{c})(i,j);
                    avgData(i,:);
                    dCount = dCount + 1;
                end
                if c == length(filenames)
                    avgData(i,j) = avgData(i,j)/dCount;
                end
            end
            %Average theta
            if j <= wTheta
                if theta.(tNames{c})(i,j) ~= 0
                    avgTheta(i,j) = avgTheta(i,j) + theta.(tNames{c})(i,j);
                    tCount = tCount + 1;
                end
                if c == length(filenames)
                    avgTheta(i,j) = avgTheta(i,j)/tCount;
                end  
            end
            
        end        
    end
end

%Copy theta data structure to use for standard deviation
sdTheta = theta.(tNames{mFile});
thetaList(1:wTheta) = 0;

%Find standard deviation of theta for each point
for i = 1:Length
    for j = 1:wTheta
        for c = 1:length(filenames)
            thetaList(c) = theta.(tNames{c})(i,j);
            if c == length(filenames)
                sdTheta(i,j) = std(thetaList);                
            end
        end
    end
end


%Plotting and display
%Setup color ordering
ColOrd = get(gca,'ColorOrder');
%Initialize variables for tracking frame (f) and characters pressed (CH)
f = 1;
CH = 0;
% setup GUI (slider)
hFig = figure();
%hAx = axes('Parent',hFig);
uicontrol('Parent',hFig, 'Style','slider', 'Value',1, 'Min',1,...
    'Max',Length, 'SliderStep',[1 1], ...
    'Position',[150 5 300 20], 'Callback',@slider_callback); 

%Plot lines to show angle between joints
while f <= Length
    for c = 1:length(filenames)
        for j = 3:numVars - 2
            if mod(j,2) ~= 0
                hold on

                px = aData.(fNames{c})(f,j); %Previous x, y
                py = aData.(fNames{c})(f,j + 1);

                x = aData.(fNames{c})(f,j + 2); %Current x, y
                y = aData.(fNames{c})(f,j + 3);

                %Plot lines
                subplot(1,2,1)
                line([px, x],[py, y], 'Color', ColOrd(j,:));            
                title(strcat('Stimulated Rat Limb Motion @ t = ', ...
                    num2str(aData.(fNames{c})(f,2)), ', f = ', ...
                    num2str(aData.(fNames{c})(f,1))))
                axis([xmin,xmax,ymin,ymax]);
                %Write angle on plot
                if j > 3
                    text(px, py + (ymax - ymin)/100, ...
                    strcat(num2str(theta.(tNames{c})(f,(j-1)/2 - 1)), '°'))
                end
                hold off                
            end  
            %Draw average theta plot with a * at the point in the data
            %currently shown on the plot beside it
            hold on
            subplot(1,2,2)
            plot(avgData(:,2), avgTheta,'Color', ColOrd(length(filenames) + 1,:))
            plot(avgData(f,2), avgTheta(f), '*')
            
            
            title('Average Rat Leg Angle Over Time')            
            xlabel('Time (s)')
            ylabel('Theta (degrees)')
            hold off             
        end
    end
                
    
    %Navigation through plots
    %Currently you have to click after moving the slider to update plot
    if j > 3 %This probably needs to be fixed for multi-version
        
        w = waitforbuttonpress();

        if w
            CH = get(gcf,'CurrentCharacter');
        end
        
        if CH == 98 %b navigates back
            if f ~= 1
                f = f - 1;
            end
        end
        if CH == 110 %n navigates forward
            if f < Length
                f = f + 1;
            end
        end
        
        if CH == 99 %c let's you choose with cursor on average plot
            disp('Choose the point you would like to navigate to on the average theta plot')
            valid = 0;
            while valid == 0
                [time,~] = ginput(1);

                if time > avgData(1,2) && time < avgData(mLength,2)
                    tFrame = find(abs((dataMat(:,2) - time)) < 0.017);
                    f = tFrame(1);
                    valid = 1;
                else
                    disp('Please choose a point within the average theta plot')
                end
            end
            CH = 0;
        end
        
        if CH == 32 %space breaks
            break
        end
        if CH == 102 %f allows text input to navigate by frame number
            frame = input('Frame:');
            if frame > Length
                frame = Length;
            end
            f = frame;
            CH = 0;
        end
        
        if CH == 116 %t allows text input to navigate by time
            time = input('Time (s):');
            tFrame = find(abs((dataMat(:,2) - time)) < 0.017);
            f = tFrame(1);
            CH = 0;
        end
        
        %clears axis to draw the next figure
        arrayfun(@cla,findall(0,'type','axes'))
    end
end

%clears figure
clf

%plots angle between points over time
hold on
for c = 1: length(filenames)
plot(data.(fNames{c})(:,2), theta.(tNames{c}),'Color', ColOrd(c,:))
end
%Plot average angle over time
plot(avgData(:,2), avgTheta,'Color', ColOrd(length(filenames) + 1,:))

hold off
title('Rat Leg Angular Motion')
xlabel('Time (s)')
ylabel('Angle (degrees)')
legend(filenames, 'Average Theta')

end

%Callback function for slider
function sVal = slider_callback(hObj, ~ ) 
global f %global frame count must be initialized

%get the slider value
sVal = round(get(hObj,'Value'));
%If the frame number isn't the same as the slider value, change the frame
%number
if sVal ~= f
    f = sVal;
end
end